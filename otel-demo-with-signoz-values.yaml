# OpenTelemetry Demo with SigNoz Backend Integration
# Extended configuration to send telemetry to multiple backends

# Global settings with SigNoz endpoint
default:
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    # SigNoz collector endpoint
    - name: SIGNOZ_COLLECTOR_ENDPOINT
      value: "signoz-otel-collector.signoz.svc.cluster.local:4317"

# OpenTelemetry Collector with multi-backend configuration
opentelemetry-collector:
  enabled: true
  mode: deployment
  config:
    exporters:
      # Jaeger exporter (existing)
      jaeger:
        endpoint: "{{ include \"otel-demo.name\" . }}-jaeger-collector:14250"
        tls:
          insecure: true
      # Prometheus exporter (existing)
      prometheus:
        endpoint: "0.0.0.0:8889"
      # SigNoz OTLP exporter (additional)
      otlp/signoz:
        endpoint: "signoz-otel-collector.signoz.svc.cluster.local:4317"
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [jaeger, otlp/signoz]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus, otlp/signoz]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/signoz]

# Jaeger configuration - primary tracing backend
jaeger:
  enabled: true
  provisionDataStore:
    cassandra: false
    elasticsearch: false
  allInOne:
    enabled: true
    args:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
    ingress:
      enabled: false
    resources:
      limits:
        memory: 400Mi
        cpu: 200m

# Prometheus configuration - metrics backend
prometheus:
  enabled: true
  alertmanager:
    enabled: false
  configmapReload:
    prometheus:
      enabled: true
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  kubeStateMetrics:
    enabled: false
  server:
    extraFlags:
      - enable-feature=exemplar-storage
    resources:
      limits:
        memory: 500Mi
        cpu: 200m

# Grafana configuration - visualization backend
grafana:
  enabled: true
  grafana.ini:
    server:
      domain: localhost
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
      serve_from_sub_path: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://{{ include "otel-demo.name" . }}-prometheus-server:9090
          isDefault: true
        - name: Jaeger
          type: jaeger
          url: http://{{ include "otel-demo.name" . }}-jaeger-query:16686
          uid: jaeger
  resources:
    limits:
      memory: 200Mi
      cpu: 100m

# Frontend Proxy configuration with SigNoz access
frontendProxy:
  enabled: true
  env:
    - name: FRONTEND_ADDR
      value: "frontend:8080"
    - name: FEATURE_FLAG_SERVICE_ADDR
      value: "featureflagservice:50053"
    - name: GRAFANA_SERVICE_ADDR
      value: "{{ include \"otel-demo.name\" . }}-grafana:3000"
    - name: JAEGER_SERVICE_ADDR
      value: "{{ include \"otel-demo.name\" . }}-jaeger-query:16686"
    - name: LOADGENERATOR_ADDR
      value: "loadgenerator:8089"
    - name: SIGNOZ_FRONTEND_ADDR
      value: "signoz-frontend.signoz.svc.cluster.local:3301"
  ingress:
    enabled: false
  service:
    type: LoadBalancer

# All demo services enabled
services:
  frontend:
    enabled: true
  loadgenerator:
    enabled: true
    env:
      - name: LOCUST_WEB_HOST
        value: "0.0.0.0"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_SPAWN_RATE
        value: "1"
  adservice:
    enabled: true
  cartservice:
    enabled: true
  checkoutservice:
    enabled: true
  currencyservice:
    enabled: true
  emailservice:
    enabled: true
  paymentservice:
    enabled: true
  productcatalogservice:
    enabled: true
  recommendationservice:
    enabled: true
  shippingservice:
    enabled: true
  quoteservice:
    enabled: true
  accountingservice:
    enabled: true
  frauddetectionservice:
    enabled: true
  featureflagservice:
    enabled: true

# Component resource limits
components:
  redis:
    useDefault:
      env: true
    resources:
      limits:
        memory: 20Mi
        cpu: 50m
  
  kafka:
    resources:
      limits:
        memory: 500Mi
        cpu: 200m