# OpenTelemetry Demo with SigNoz Backend Integration - Final Corrected Values
# Configuration matching the current chart schema

default:
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_COLLECTOR_NAME
      value: otel-collector
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: cumulative
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: 'service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1'
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name

components:
  # Frontend proxy configuration
  frontend-proxy:
    enabled: true
    useDefault:
      env: true
    service:
      type: LoadBalancer
      port: 8080

  # Frontend service
  frontend:
    enabled: true
    useDefault:
      env: true
    resources:
      limits:
        memory: 250Mi
        cpu: 200m

  # Load generator
  load-generator:
    enabled: true
    useDefault:
      env: true
    env:
      - name: LOCUST_WEB_HOST
        value: "0.0.0.0"
      - name: LOCUST_USERS
        value: "10"
      - name: LOCUST_SPAWN_RATE
        value: "1"
      - name: LOCUST_HOST
        value: http://frontend-proxy:8080

  # All microservices with correct names
  accounting:
    enabled: true
    useDefault:
      env: true

  ad:
    enabled: true
    useDefault:
      env: true

  cart:
    enabled: true
    useDefault:
      env: true

  checkout:
    enabled: true
    useDefault:
      env: true

  currency:
    enabled: true
    useDefault:
      env: true

  email:
    enabled: true
    useDefault:
      env: true

  fraud-detection:
    enabled: true
    useDefault:
      env: true

  payment:
    enabled: true
    useDefault:
      env: true

  product-catalog:
    enabled: true
    useDefault:
      env: true

  quote:
    enabled: true
    useDefault:
      env: true

  recommendation:
    enabled: true
    useDefault:
      env: true

  shipping:
    enabled: true
    useDefault:
      env: true

  # Supporting services
  flagd:
    enabled: true
    useDefault:
      env: true

  kafka:
    enabled: true
    useDefault:
      env: true
    resources:
      limits:
        memory: 500Mi
        cpu: 200m

  valkey-cart:
    enabled: true
    useDefault:
      env: true
    resources:
      limits:
        memory: 20Mi
        cpu: 50m

# OpenTelemetry Collector with SigNoz exporter
opentelemetry-collector:
  enabled: true
  mode: deployment
  config:
    exporters:
      # Jaeger exporter (existing)
      otlp:
        endpoint: jaeger-collector:4317
        tls:
          insecure: true
      # Prometheus exporter (existing)
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
      # SigNoz OTLP exporter (additional)
      otlp/signoz:
        endpoint: signoz-otel-collector.signoz.svc.cluster.local:4317
        tls:
          insecure: true
      # OpenSearch exporter for logs
      opensearch:
        logs_index: otel
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [otlp, otlp/signoz, debug, spanmetrics]
        metrics:
          receivers: [otlp, spanmetrics]
          processors: [memory_limiter, resource, batch]
          exporters: [otlphttp/prometheus, otlp/signoz, debug]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [opensearch, otlp/signoz, debug]

# Jaeger configuration
jaeger:
  enabled: true
  fullnameOverride: jaeger
  provisionDataStore:
    cassandra: false
  allInOne:
    enabled: true
    args:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://prometheus:9090"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    resources:
      limits:
        memory: 400Mi
        cpu: 200m

# Prometheus configuration
prometheus:
  enabled: true
  alertmanager:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false
  server:
    fullnameOverride: prometheus
    extraFlags:
      - "enable-feature=exemplar-storage"
      - "web.enable-otlp-receiver"
    resources:
      limits:
        memory: 500Mi
        cpu: 200m

# Grafana configuration
grafana:
  enabled: true
  fullnameOverride: grafana
  testFramework:
    enabled: false
  grafana.ini:
    auth:
      disable_login_form: true
    auth.anonymous:
      enabled: true
      org_name: Main Org.
      org_role: Admin
    server:
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
      serve_from_sub_path: true
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          uid: webstore-metrics
          type: prometheus
          url: http://prometheus:9090
          editable: true
          isDefault: true
        - name: Jaeger
          uid: webstore-traces
          type: jaeger
          url: http://jaeger-query:16686/jaeger/ui
          editable: true
          isDefault: false
  resources:
    limits:
      memory: 200Mi
      cpu: 100m